-- 1. Retrieve all customers who joined in the last 3 years.

-- SELECT 
--     *
-- FROM 
--     customers
-- WHERE 
--     joindate >= NOW() - INTERVAL '3 years'


-- 2. Get a list of vehicles that are unsold.

-- SELECT 
--     make,
--     model,
--     year,
--     price,
--     status
-- FROM 
--    vehicles
-- WHERE 
--    status = 'Available'


-- 3. Find the total number of sales per dealership.

-- SELECT 
--     d.name,
--     d.location,
--     COUNT(s.saleid) AS total_sales_per_dealership
-- FROM 
--     dealerships AS d
-- LEFT JOIN sales AS s ON s.saleid = d.dealerid
-- GROUP BY d.name, d.location


-- 4. Get the average sale price of vehicles.

-- SELECT 
--     vehicleid,
--     ROUND(AVG(saleprice),2) AS avg_sale_price
-- FROM 
--    sales
-- GROUP BY 
--    vehicleid


-- 5. Retrieve all vehicles purchased before 2015 and cost more than $20,000.

-- SELECT 
--     *
-- FROM 
--    vehicles
-- WHERE 
--    price > 20000 AND purchasedate < '2015-01-01'


-- 6. List the top 3 dealerships with the highest number of sales.

-- SELECT 
--     d.name,
--     s.customerid,
--     s.vehicleid,
--     s.saleprice
-- FROM 
--     sales AS s
-- JOIN 
--     dealerships AS d ON d.dealerid = s.saleid
-- ORDER BY 
--     saleprice DESC
-- LIMIT 3


-- 7. Find all customers who have never purchased a vehicle.

-- SELECT 
--     c.customerid,
--     c.name
-- FROM 
--     customers AS c
-- LEFT JOIN 
--     sales AS s ON s.customerid = c.customerid
-- WHERE 
--     s.saleid IS NULL


-- 8. Retrieve sales where the price was above the average sale price.

-- SELECT 
--     *
-- FROM 
--     sales
-- WHERE 
--     saleprice > (SELECT 
--         ROUND(AVG(saleprice),2)
--     FROM 
--         sales
--     )


-- 9. Get the number of vehicles sold per year.

-- SELECT 
--     EXTRACT(YEAR FROM s.saledate) AS sale_year,
--     COUNT(*) AS vehicles_sold
-- FROM 
--     sales s
-- GROUP BY 
--     EXTRACT(YEAR FROM s.saledate)
-- ORDER BY 
--     sale_year DESC


-- 10. Rank vehicles by their sale price within each dealership.

-- SELECT 
--     make,
--     model,
--     vehicleid,
--     dealerid,
--     price,
--     RANK() OVER (PARTITION BY dealerid ORDER BY price) AS highest_rank
-- FROM 
--     vehicles
-- ORDER BY 
--    highest_rank DESC


-- 11. Show all services done on cars that have been sold.

-- SELECT 
--     v.vehicleid,
--     v.make,
--     v.model,
--     sr.description
-- FROM 
--     vehicles AS v
-- JOIN 
--     servicerecords AS sr ON sr.vehicleid = v.vehicleid
-- WHERE 
--     status = 'sold'


-- 12. Find the dealership with the highest average vehicle price.

-- SELECT 
--     d.name,
--     ROUND(AVG(v.price), 2) AS avg_vehicle_price
-- FROM 
--     dealerships AS d
-- JOIN 
--     vehicles AS v ON v.dealerid = d.dealerid
-- GROUP BY 
--     d.name
-- ORDER BY 
--     avg_vehicle_price DESC
-- LIMIT 1  


-- 13. List all vehicles with their corresponding dealership name.

-- SELECT 
--     v.vehicleid,
--     d.name AS dealership,
--     v.make
-- FROM 
--     vehicles AS v
-- JOIN
--     dealerships AS d ON d.dealerid = v.dealerid


-- 14. Find all vehicles that have a service record but have not been sold.

-- SELECT 
--     v.vehicleid,
--     v.make,
--     v.model,
--     sr.servicedate
-- FROM
--     vehicles AS v
-- JOIN 
--     servicerecords AS sr ON sr.vehicleid = v.vehicleid


-- 15. Get the total revenue generated by each dealership.

-- SELECT 
--     d.name,
--     SUM(v.price) AS total_revenue,
--     RANK() OVER(ORDER BY SUM(v.price)DESC) AS rank
-- FROM 
--     vehicles AS v
-- JOIN 
--     dealerships AS d ON d.dealerid = v.dealerid
-- WHERE 
--     v.status = 'Sold'
-- GROUP BY 
--     d.name
-- ORDER BY 
--     rank


-- 16. Find the average sale price for each vehicle make and model, rounded to two decimal places.

-- SELECT 
--     v.make,
--     v.model,
--     ROUND(AVG(s.saleprice), 2) AS avg_sale_price
-- FROM 
--     vehicles v
-- JOIN 
--     sales s ON s.vehicleid = v.vehicleid
-- GROUP BY 
--     v.make, v.model
-- ORDER BY 
--     avg_sale_price DESC


-- 17. Identify customers who have bought more than one car.

-- SELECT 
--     c.customerid,
--     c.name,
--     COUNT(s.saleid) AS cars_purchased
-- FROM 
--     customers c
-- JOIN 
--     sales s ON s.customerid = c.customerid
-- GROUP BY 
--     c.customerid, c.name
-- HAVING 
--     COUNT(s.saleid) > 1
-- ORDER BY 
--     cars_purchased DESC
    
-- 18. Retrieve the top 5 most frequently serviced vehicle models.

-- SELECT 
--     v.make,
--     v.model,
--     COUNT(sr.serviceid) AS service_count
-- FROM 
--     vehicles v
-- JOIN 
--     servicerecords sr ON sr.vehicleid = v.vehicleid
-- GROUP BY 
--     v.make, v.model
-- ORDER BY 
--     service_count DESC
-- LIMIT 5

-- 19. List all dealerships and their total sales, even if they have no sales.

-- SELECT 
--     d.dealerid,
--     d.name,
--     SUM(s.saleprice) AS total_sales
-- FROM 
--     dealerships AS d
-- LEFT JOIN 
--     sales AS s ON s.saleid = d.dealerid
-- GROUP BY 
--     d.dealerid
-- ORDER BY 
--     total_sales DESC

-- 20. Find the dealership with the longest time in business.

-- SELECT 
--     name,
--     EXTRACT(YEAR FROM AGE(NOW(), make_date(establishedyear, 1, 1))) AS years_in_business
-- FROM 
--     dealerships
-- ORDER BY 
--     years_in_business DESC
-- LIMIT 1

-- 21. Show vehicles that have been in service more than twice but are still unsold.

-- SELECT 
--     v.vehicleid,
--     v.make,
--     v.model,
--     sr.servicedate,
--     v.status,
--     COUNT(sr.serviceid) AS total_service
-- FROM
--     vehicles AS v
-- JOIN 
--     servicerecords AS sr ON sr.vehicleid = v.vehicleid
-- WHERE 
--     v.status = 'Available'
-- GROUP BY 
--     v.vehicleid, v.make, v.model, sr.servicedate, v.status
-- HAVING 
--     COUNT(sr.serviceid) > 2
-- ORDER BY
--     total_service DESC


-- 22. Get the highest and lowest sale prices for each dealership using a window function.

-- SELECT DISTINCT 
--     d.dealerid, d.name,
--        MIN(s.saleprice) OVER (PARTITION BY d.dealerid) AS MinSalePrice,
--        MAX(s.saleprice) OVER (PARTITION BY d.dealerid) AS MaxSalePrice
-- FROM 
--     dealerships AS d
-- INNER JOIN 
--     vehicles AS v ON d.dealerid = v.dealerid
-- INNER JOIN 
--     sales AS s ON v.vehicleid = s.vehicleid


-- 23. Retrieve customers who have spent the most money on vehicle services

-- SELECT 
--     c.customerid,
--     c.name,
--     SUM(sr.cost) AS TotalServiceCost
-- FROM 
--     customers AS c
-- INNER JOIN 
--     sales AS s ON c.customerid = s.customerid
-- INNER JOIN 
--     servicerecords sr ON s.vehicleid = sr.vehicleid
-- GROUP BY
--     c.customerid, c.Name
-- ORDER BY
--     TotalServiceCost DESC

-- 24. Show the percentage of total sales each dealership contributes.

-- SELECT 
--     d.dealerid, 
--     d.name,
--     SUM(s.saleprice) AS DealerSales,
--     ROUND(SUM(s.saleprice) * 100.0 / SUM(SUM(s.saleprice)) OVER (), 2) AS SalesPercentage
-- FROM 
--     dealerships AS d
-- INNER 
--     JOIN vehicles AS v ON d.dealerid = v.dealerid
-- INNER JOIN 
--     sales AS s ON v.vehicleid = s.vehicleid
-- GROUP BY 
--     d.dealerid, d.name


-- 25. Create a CTE that lists vehicles sold in the last 6 months and use it to find the top 3 most expensive recent sales.

-- WITH RecentSales AS (
--     SELECT 
--         s.saleid, 
--         s.customerid, 
--         s.vehicleid, 
--         s.saledate, 
--         s.saleprice, 
--         s.paymentmethod
--     FROM 
--         sales AS s
--     INNER JOIN 
--         Vehicles AS v ON s.vehicleid = v.vehicleid
--     WHERE 
--         s.saledate >= NOW() - INTERVAL '6 months'
-- )

-- SELECT 
--     *
-- FROM 
--     RecentSales
-- ORDER BY 
--     SalePrice DESC
-- LIMIT 3
